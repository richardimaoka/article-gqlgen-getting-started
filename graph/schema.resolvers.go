package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"os"

	"github.com/richardimaoka/article-gqlgen-getting-started/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	todo1 := model.Todo{ID: "1", Text: "Go shopping", Done: false}
	todo2 := model.Todo{ID: "2", Text: "Finish homework", Done: true}
	todo3 := model.Todo{ID: "3", Text: "Squat 100 reps", Done: false}

	return []*model.Todo{&todo1, &todo2, &todo3}, nil
}

// Todo is the resolver for the todo field.
func (r *queryResolver) Todo(ctx context.Context) (*model.Todo, error) {
	filePath := "data/todo.json"
	bytes, err := os.ReadFile(filePath)
	if err != nil {
		log.Printf("Todo() failed to read file: %v", err)
		return nil, fmt.Errorf("Internal Server Error")
	}

	var todo *model.Todo
	err = json.Unmarshal(bytes, &todo)
	if err != nil {
		log.Printf("Todo() failed to unmarshal json: %v", err)
		return nil, fmt.Errorf("Internal Server Error")
	}

	return todo, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
